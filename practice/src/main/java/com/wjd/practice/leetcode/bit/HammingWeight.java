package com.wjd.practice.leetcode.bit;

import com.wjd.practice.TestCase;

/**
 * 191. 位1的个数
 * <p>
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。
 * <p>
 * 在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
 * <p>
 * 因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * <p>
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 3 中，输入表示有符号整数 -3。
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 * <p>
 * 示例 2：
 * <p>
 * 输入：n = 00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 * <p>
 * 示例 3：
 * <p>
 * 输入：n = 11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * <p>
 * 提示：
 * <p>
 * 输入必须是长度为 32 的 二进制串 。
 * <p>
 * 进阶：
 * <p>
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 * @author weijiaduo
 * @since 2022/7/9
 */
public class HammingWeight {

    /**
     * 思路：每次取最低位判断是1或0，统计数量，然后无符号右移n
     * <p>
     * 复杂度：时间 O(1) 空间 O(1)
     * <p>
     * 执行耗时:0 ms,击败了100.00% 的Java用户
     * 内存消耗:38.6 MB,击败了35.80% 的Java用户
     */
    @TestCase(input = {"11", "128"},
            output = {"3", "1"})
    public int shift(int n) {
        int count = 0;
        while (n != 0) {
            count += n & 1;
            n >>>= 1;
        }
        return count;
    }

    /**
     * 官解：每次翻转最后一位1变成0，翻转次数就是1的个数
     * <p>
     * 复杂度：时间 O(k) 空间 O(1)
     * <p>
     * 执行耗时:0 ms,击败了100.00% 的Java用户
     * 内存消耗:38.3 MB,击败了82.22% 的Java用户
     */
    @TestCase(input = {"11", "128"},
            output = {"3", "1"})
    public int subtract(int n) {
        int count = 0;
        while (n != 0) {
            count++;
            n = n & (n - 1);
        }
        return count;
    }

}
