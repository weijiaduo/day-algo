package com.wjd.algorithm.practice.leetcode;

import com.wjd.algorithm.practice.leetcode.tree.MaxLevelSum;

public class MainRunner {

    public static void main(String[] args) {
        // 11. 盛最多水的容器
        // new MaxArea().solve();
        // 35. 搜索插入位置
        // new SearchInsert().solve();
        // 53. 最大子序和
        // new MaxSubArray().solve();
        // 66. 加一
        // new PlusOne().solve();
        // 88. 合并两个有序数组
        // new MergeSortedArray().solve();
        // 989. 数组形式的整数加法
        // new AddToArrayForm().solve();
        // 118. 杨辉三角
        // new PascalTrianglePrint().solve();
        // 119. 杨辉三角2
        // new PascalTrianglePrint2().solve();
        // 121. 买卖股票的最佳时机
        // new MaxProfit().solve();
        // 122. 买卖股票的最佳时机 II
        // new MaxProfit2().solve();
        // 167. 两数之和 II - 输入有序数组
        // new TwoSum2().solve();
        // 169. 多数元素
        // new MajorityElement().solve();
        // 228. 汇总区间
        // new SummaryRanges().solve();
        // 217. 存在重复元素
        // new ContainsDuplicate().solve();
        // 219. 存在重复元素 II
        // new ContainsNearbyDuplicate().solve();
        // 268. 丢失的数字
        // new MissingNumber().solve();
        // 283. 移动零
        // new MoveZeroes().solve();
        // 414. 第三大的数
        // new ThirdMax().solve();
        // 448. 找到所有数组中消失的数字
        // new DisappearedNumbers().solve();
        // 485. 最大连续 1 的个数
        // new MaxConsecutiveOnes().solve();
        // 561. 数组拆分 I
        // new ArrayPairSum().solve();
        // 566. 重塑矩阵
        // new MatrixReshape().solve();
        // 605. 种花问题
        // new PlaceFlowers().solve();
        // 628. 三个数的最大乘积
        // new MaximumProduct().solve();
        // 643. 子数组最大平均数 I
        // new MaxAverage().solve();
        // 665. 非递减数列
        // new CheckPossibility().solve();
        // 674. 最长连续递增序列
        // new LengthOfLCIS().solve();
        // 697. 数组的度
        // new ShortestSubArray().solve();
        // 717. 1比特与2比特字符
        // new OneBitCharacter().solve();
        // 661. 图片平滑器
        // new ImageSmoother().solve();
        // 724. 寻找数组的中心下标
        // new PivotIndex().solve();
        // 746. 使用最小花费爬楼梯
        // new MinCostClimbingStairs().solve();
        // 747. 至少是其他数字两倍的最大数
        // new DominantIndex().solve();
        // 766. 托普利茨矩阵
        // new ToeplitzMatrix().solve();
        // 830. 较大分组的位置
        // new LargeGroupPositions().solve();
        // 832. 翻转图像
        // new FlipAndInvertImage().solve();
        // 905. 按奇偶排序数组
        // new SortArrayByParity().solve();
        // 922. 按奇偶排序数组 II
        // new SortArrayByParityII().solve();
        // 867. 转置矩阵
        // new TransposeMatrix().solve();
        // 896. 单调数列
        // new Monotonic().solve();
        // 495. 提莫攻击
        // new FindPoisonedDuration().solve();
        // 914. 卡牌分组
        // new GroupsSizeX().solve();
        // 136. 只出现一次的数字
        // new SingleNumber().solve();
        // 204. 计数质数
        // new PrimesCount().solve();
        // 575. 分糖果
        // new DistributeCandies().solve();
        // 15. 三数之和
        // new ThreeSum().solve();
        // 16. 最接近的三数之和
        // new ThreeSumClosest().solve();
        // 18. 四数之和
        // new FourSum().solve();
        // 31. 下一个排列
        // new NextPermutation().solve();
        // 33. 搜索旋转排序数组
        // new RotateSearch().solve();
        // 34. 在排序数组中查找元素的第一个和最后一个位置
        // new SearchRange().solve();
        // 36. 有效的数独
        // new ValidSudoku().solve();
        // 39. 组合总和
        // new CombinationSum().solve();
        // 6. Z型变换
        // new ZConvert().solve();
        // 12. 整数转罗马数字
        // new IntToRoman().solve();
        // 17. 电话号码得字母组合
        // new LetterCombinations().solve();
        // 10. 正则表达式
        // new PatternMatch().solve();
        // 19. 删除链表的倒数第N个节点
        // new RemoveNthFromEnd().solve();
        // 22. 括号生成
        // new GenerateParenthesis().solve();
        // 812. 最大三角形面积
        // new LargestTriangleArea().solve();
        // 23. 合并K个升序链表
        // new MergeKLists().solve();
        // 面试题04.06 后继者
        // new InorderSuccessor().solve();
        // 24. 两两交换链表中的节点
        // new SwapPairs().solve();
        // 953. 验证外星语字典
        // new AlienSorted().solve();
        // 25. K个一组翻转链表
        // new ReverseKGroup().solve();
        // 28. 实现 strStr 函数
        // new StrStr().solve();
        // 29. 两数相除
        // new BitsDivide().solve();
        // 668. 乘法表中第k小的数
        // new FindKthNumber().solve();
        // 462. 最少移动次数使数组元素相等 II
        // new MinMoves2().solve();
        // 436. 寻找右区间
        // new FindRightInterval().solve();
        // 961. 在长度 2N 的数组中找出重复 N 次的元素
        // new RepeatedNTimes().solve();
        // 32. 最长有效括号
        // new LongestValidParentheses().solve();
        // 464. 我能赢吗
        // new CanWin().solve();
        // 30. 串联所有单次的字串
        // new FindSubstring().solve();
        // 37. 解数独
        // new SolveSudoku().solve();
        // 38. 外观数组
        // new CountAndSay().solve();
        // 40. 组合总和2
        // new CombinationSum2().solve();
        // 41. 缺失的第一个整数
        // new FirstMissingPositive().solve();
        // 42. 接雨水
        // new Trap().solve();
        // 43. 字符串相乘
        // new StrMultiply().solve();
        // 58. 最后一个单词的长度
        // new LengthOfLastWord().solve();
        // 67. 二进制求和
        // new AddBinary().solve();
        // 69. x的平方根
        // new IntSqrt().solve();
        // 83. 删除排序链表中的重复元素
        // new DeleteDuplicates().solve();
        // 965. 单值二叉树
        // new UnivalTree().solve();
        // 10. 通配符匹配
        // new PatternMatch2().solve();
        // 699. 掉落的方块
        // new FallingSquares().solve();
        // 17.11 单词距离
        // new FindClosest().solve();
        // 45.跳跃游戏
        // new JumpToEnd().solve();
        // 1021. 删除最外层的括号
        // new RemoveOuterParentheses().solve();
        // 46. 全排列
        // new Permute().solve();
        // 47. 全排列2
        // new PermuteUnique().solve();
        // 468. 验证IP地址
        // new ValidIPAddress().solve();
        // 48. 旋转图像
        // new RotateMatrix().solve();
        // 49. 字母异位词分组
        // new GroupAnagrams().solve();
        // 50. Pow(x,y)
        // new MyPow().solve();
        // 1022. 从根到叶的二进制之和
        // new SumRootToLeaf().solve();
        // 114. 外星文字典
        // new AlienOrder().solve();
        // 51. N皇后
        // new SolveNQueens().solve();
        // 52. N皇后2
        // new TotalNQueens().solve();
        // 54. 螺旋矩阵
        // new SpiralOrder().solve();
        // 59. 螺旋矩阵2
        // new GenerateMatrix().solve();
        // 55. 跳跃游戏
        // new CanJumpToEnd().solve();
        // 56. 合并区间
        // new MergeIntervals().solve();
        // 57. 插入区间
        // new InsertIntervals().solve();
        // 60. 排列序列
        // new GetPermutation().solve();
        // 473. 火柴拼正方形
        // new MakeSquare().solve();
        // 61. 旋转链表
        // new RotateRight().solve();
        // 62. 不同路径
        // new UniquePaths().solve();
        // 63. 不同路径2
        // new UniquePathsWithObstacles().solve();
        // 64. 最小路径和
        // new MinPathSum().solve();
        // 65. 有效数字
        // new IsNumber().solve();
        // 450. 删除二叉搜索树中的节点
        // new DeleteNode().solve();
        // 68. 文本左右对齐
        // new FullJustify().solve();
        // 829. 连续整数求和
        // new ConsecutiveNumbersSum().solve();
        // 70. 爬楼梯
        // new ClimbStairs().solve();
        // 71. 简化路径
        // new SimplifyPath().solve();
        // 72. 编辑距离
        // new MinDistance().solve();
        // 929. 独特的电子邮件地址
        // new NumUniqueEmails().solve();
        // 73. 矩阵置零
        // new SetMatrixZeroes().solve();
        // 74. 搜索矩阵
        // new SearchSortedMatrix().solve();
        // 75. 颜色分类
        // new SortColors().solve();
        // 76. 最小覆盖字串
        // new MinCoverSubstring().solve();
        // 77. 组合
        // new Combine().solve();
        // 78. 子集
        // new Subsets().solve();
        // 79. 单词搜索
        // new MatrixExistWord().solve();
        // 80. 删除有序数组中的重复项
        // new RemoveDuplicates().solve();
        // 81. 搜索旋转排序数组
        // new SearchRotateArray().solve();
        // 83. 删除排序链表中的重复元素2
        // new DeleteDuplicates2().solve();
        // 732. 我的日程安排表
        // new MyCalendarThree().solve();
        // 86. 分隔链表
        // new Partition().solve();
        // 875. 爱吃香蕉的珂珂
        // new MinEatingSpeed().solve();
        // 84. 柱状图中最大的矩形
        // new LargestRectangleArea().solve();
        // 1037. 有效的回旋镖
        // new IsBoomerang().solve();
        // 87. 扰乱字符串
        // new Scramble().solve();
        // 730. 统计不同回文子序列
        // new CountPalindromicSubsequences().solve();
        // 89. 格雷编码
        // new GrayCode().solve();
        // 90. 子集2
        // new SubsetsWithDup().solve();
        // 926. 将字符串翻转到单调递增
        // new MinFlipsMonoIncr().solve();
        // 91. 解码方法
        // new NumDecodings().solve();
        // 92. 反转链表2
        // new ReverseBetween().solve();
        // 93. 复原IP地址
        // new RestoreIpAddresses().solve();
        // 94. 二叉树的中序遍历
        // new InorderTraversal().solve();
        // 95. 不同的二叉树2
        // new GenerateTrees().solve();
        // 96. 不同的二叉树搜索树
        // new NumTrees().solve();
        // 97. 交错字符串
        // new IsInterleave().solve();
        // 98. 验证二叉搜索树
        // new IsValidBST().solve();
        // 100. 相同的树
        // new IsSameTree().solve();
        // 99. 恢复二叉搜索树
        // new RecoverTree2().solve();
        // 890. 查找和替换模式
        // new FindAndReplacePattern().solve();
        // 101. 对称二叉树
        // new SymmetricTree().solve();
        // 1051. 高度检查器
        // new HeightChecker().solve();
        // 102. 二叉树的层序遍历
        // new LevelOrder().solve();
        // 103. Z字形打印树
        // new ZigzagLevelOrder().solve();
        // 104. 二叉树的最大深度
        // new MaximumDepthOfBinaryTree().solve();
        // 498. 对角线遍历
        // new FindDiagonalOrder().solve();
        // 105. 从前序与中序遍历序列构造二叉树
        // new BuildTreeFromPreorderAndInorder().solve();
        // 106. 从中序与后序遍历序列构造二叉树
        // new BuildTreeFromPostorderAndInorder().solve();
        // 532. 数组中的 k-diff 数对
        // new FindPairs().solve();
        // 1089. 复写零
        // new DuplicateZeros().solve();
        // 107. 二叉树的层序遍历2
        // new LevelOrderBottom().solve();
        // [剑指 Offer || 029]排序的循环链表
        // new InsertSorted().solve();
        // 108. 将有序数组转换为二叉搜索树
        // new SortedArrayToBST().solve();
        // 109. 有序链表转换二叉搜索树
        // new SortedListToBST().solve();
        // 110. 平衡二叉树
        // new IsBalancedTree().solve();
        // 111. 二叉树的最小深度
        // new MinimumTreeDepth().solve();
        // 112. 路径总和
        // new HasPathSum().solve();
        // 113. 路径总和2
        // new PathSum().solve();
        // 114. 二叉树展开为链表
        // new Flatten().solve();
        // 508. 出现次数最多的子树元素和
        // new FindFrequentTreeSum().solve();
        // 117. 填充每个节点的下一个右侧节点指针2
        // new ConnectLevelNext2().solve();
        // 120. 三角形最小路径和
        // new MinimumTotal().solve();
        // 125. 验证回文串
        // new IsPalindrome().solve();
        // 144. 二叉树的前序遍历
        // new PreorderTraversal().solve();
        // 145. 二叉树的后序遍历
        // new PostorderTraversal().solve();
        // 115. 不同的子序列
        // new NumDistinct().solve();
        // 123. 买卖股票的最佳时机3
        // new MaxProfit3().solve();
        // 1108. IP地址无效化
        // new DefangIpAddr().solve();
        // 124. 二叉树中的最大路径和
        // new MaxPathSum().solve();
        // 126. 单词接龙2
        // new FindLadders().solve();
        // 513. 找树左下角的值
        // new FindBottomLeftValue().solve();
        // 129. 求根节点到叶节点数字之和
        // new SumNumbers().solve();
        // 130. 被围绕的区域
        // new SurroundBoard().solve();
        // 131. 分割回文串
        // new PartitionString().solve();
        // 128. 最长连续序列
        // new LongestConsecutive().solve();
        // 132. 分割回文串2
        // new MinCut().solve();
        // 515. 在每个树行中找最大值
        // new LargestLevelValues().solve();
        // 137. 只出现一次的数字
        // new SingleNumber2().solve();
        // 剑指Offer 2 091 粉刷房子
        // new MinCost().solve();
        // 139. 单词拆分
        // new WordBreak().solve();
        // 140. 单词拆分2
        // new WordBreak2().solve();
        // 522. 最长特殊序列
        // new FindLUSlength().solve();
        // 143. 重排链表
        // new ReorderList().solve();
        // 147. 对链表进行插入排序
        // new InsertionSortList().solve();
        // 148. 排序链表
        // new SortListInOnLogn().solve();
        // 150. 逆波兰表达式求值
        // new EvalRPN().solve();
        // 134. 加油站
        // new CanCompleteCircuit().solve();
        // 135. 分发糖果
        // new Candy().solve();
        // 149. 直线上最多的点数
        // new MaxPoints().solve();
        // 146. LRU 缓存
        // new LRUCache(0).solve();
        // 151. 颠倒字符串中的单词
        // new ReverseWords().solve();
        // 1175. 质数排列
        // new NumPrimeArrangements().solve();
        // 152. 乘积最大子数组
        // new MaxProduct().solve();
        // 153. 寻找旋转排序数组中的最小值
        // new FindMin().solve();
        // 241. 为运算表达式设计优先级
        // new DiffWaysToCompute().solve();
        // 154. 寻找旋转排序数组中的最小值2
        // new FindMin2().solve();
        // 160. 相交链表
        // new GetIntersectionNode().solve();
        // 871. 最低加油次数
        // new MinRefuelStops().solve();
        // 155. 最小栈
        // new MinStack().solve();
        // new DiffMinStack().solve();
        // 162. 寻找峰值
        // new FindPeakElement().solve();
        // 164. 最大间距
        // new MaximumGap().solve();
        // 165. 比较版本号
        // new CompareVersion().solve();
        // 166. 分数到小数
        // new FractionToDecimal().solve();
        // 168. Excel表列名称
        // new ConvertToTitle().solve();
        // 6108. 解密消息
        // new DecodeMessage().solve();
        // 6111. 螺旋矩阵4
        // new SpiralMatrix().solve();
        // 6109. 知道秘密的人数
        // new PeopleAwareOfSecret().solve();
        // 6110. 网格图中递增路径的数目
        // new CountPaths().solve();
        // 556. 下一个更大元素
        // new NextGreaterElement().solve();
        // 1200. 最小绝对差
        // new MinimumAbsDifference().solve();
        // 171. Excel表列序号
        // new TitleToNumber().solve();
        // 173. 二叉搜索树迭代器
        // new BSTIterator(null).solve();
        // 729. 我的日程安排表
        // new MyCalendar().solve();
        // 179. 最大数
        // new LargestNumber().solve();
        // 187. 重复的DNA序列
        // new FindRepeatedDnaSequences().solve();
        // 648. 单词替换
        // new ReplaceWords().solve();
        // 1217. 玩筹码
        // new MinCostToMoveChips().solve();
        // 189. 轮转数组
        // new RotateArray().solve();
        // 190. 颠倒二进制位
        // new ReverseBits().solve();
        // 191. 位1的个数
        // new HammingWeight().solve();
        // 198. 打家劫舍
        // new Rob().solve();
        // 199. 二叉树的右视图
        // new RightSideView().solve();
        // 873. 最长的斐波那契序列的长度
        // new LenLongestFibSubseq().solve();
        // 172. 阶乘后的零
        // new TrailingZeroes().solve();
        // 6116. 计算布尔二叉树的值
        // new EvaluateTree().solve();
        // 6117. 坐上公交的最晚时间
        // new LatestTimeCatchTheBus().solve();
        // 6118. 最小差值平方和
        // new MinSumSquareDiff().solve();
        // 6112. 装满杯子需要的最短总时长
        // new FillCups().solve();
        // 6114. 移动片段得到字符串
        // new CanChange().solve();
        // 6115. 统计理想数组的数目
        // new IdealArrays().solve();
        // 188. 买卖股票的最佳时机4
        // new MaxProfit4().solve();
        // 1252. 奇数值单元格的数目
        // new OddCells().solve();
        // 174. 地下城游戏
        // new CalculateMinimumHP().solve();
        // 735. 行星碰撞
        // new AsteroidCollision().solve();
        // 202. 快乐数
        // new HappyNumber().solve();
        // 203. 移除链表元素
        // new RemoveElements().solve();
        // 205. 同构字符串
        // new IsomorphicString().solve();
        // 206. 反转链表
        // new ReverseList().solve();
        // 207. 课程表
        // new FinishCourses().solve();
        // 209. 长度最小的子数组
        // new MinSubArrayLen().solve();
        // 210. 课程表2
        // new FindCoursesOrder().solve();
        // 11. 添加与搜索单词
        // new WordDictionary().solve();
        // 212. 单词搜索2
        // new FindWords().solve();
        // 213. 打家劫舍2
        // new Rob2().solve();
        // 215. 数组中的第K个最大元素
        // new FindKthLargest().solve();
        // 216. 组合总和3
        // new CombinationSum3().solve();
        // 201. 数字范围按位与
        // new RangeBitwiseAnd().solve();
        // 剑指 Offer II 041. 滑动窗口的平均值
        // new MovingAverage(0).solve();
        // 565. 数组嵌套
        // new ArrayNesting().solve();
        // 1260. 二维网格迁移
        // new ShiftGrid().solve();
        // 814. 二叉树剪枝
        // new PruneTree().solve();
        // 757. 设置交集大小至少为2
        // new IntersectionSizeTwo().solve();
        // 919. 完全二叉树插入器
        // new CBTInserter(null).solve();
        // 592.  分数加减运算
        // new FractionAddition().solve();
        // 1331. 数组序号转换
        // new ArrayRankTransform().solve();
        // 1161. 最大层内元素和
        new MaxLevelSum().solve();
    }

}
