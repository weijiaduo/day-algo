package com.wjd.practice.leetcode.array.statistics;

/**
 * 1375. 二进制字符串前缀一致的次数
 * <p>
 * 给你一个长度为 n 、下标从 1 开始的二进制字符串，所有位最开始都是 0 。我们会按步翻转该二进制字符串的所有位（即，将 0 变为 1）。
 * <p>
 * 给你一个下标从 1 开始的整数数组 flips ，其中 flips[i] 表示对应下标 i 的位将会在第 i 步翻转。
 * <p>
 * 二进制字符串 前缀一致 需满足：在第 i 步之后，在 闭 区间 [1, i] 内的所有位都是 1 ，而其他位都是 0 。
 * <p>
 * 返回二进制字符串在翻转过程中 前缀一致 的次数。
 * <p>
 * 示例 1：
 * <p>
 * 输入：flips = [3,2,4,1,5]
 * 输出：2
 * 解释：二进制字符串最开始是 "00000" 。
 * 执行第 1 步：字符串变为 "00100" ，不属于前缀一致的情况。
 * 执行第 2 步：字符串变为 "01100" ，不属于前缀一致的情况。
 * 执行第 3 步：字符串变为 "01110" ，不属于前缀一致的情况。
 * 执行第 4 步：字符串变为 "11110" ，属于前缀一致的情况。
 * 执行第 5 步：字符串变为 "11111" ，属于前缀一致的情况。
 * 在翻转过程中，前缀一致的次数为 2 ，所以返回 2 。
 * <p>
 * 示例 2：
 * <p>
 * 输入：flips = [4,1,2,3]
 * 输出：1
 * 解释：二进制字符串最开始是 "0000" 。
 * 执行第 1 步：字符串变为 "0001" ，不属于前缀一致的情况。
 * 执行第 2 步：字符串变为 "1001" ，不属于前缀一致的情况。
 * 执行第 3 步：字符串变为 "1101" ，不属于前缀一致的情况。
 * 执行第 4 步：字符串变为 "1111" ，属于前缀一致的情况。
 * 在翻转过程中，前缀一致的次数为 1 ，所以返回 1 。
 * <p>
 * 提示：
 * <p>
 * n == flips.length
 * 1 <= n <= 5 * 10⁴
 * flips 是范围 [1, n] 中所有整数构成的一个排列
 *
 * @author weijiaduo
 * @since 2023/6/15
 */
public class NumTimesAllBlue {

    /**
     * 官方题解
     * <p>
     * 思路：i 次翻转后，[1, i] 内所有位都是 1，等价于前 i 次翻转中下标的最大值等于 i
     * <p>
     * 复杂度：时间 O(n) 空间 O(1)
     * <p>
     * 执行耗时:2 ms,击败了91.32% 的Java用户
     * 内存消耗:47.8 MB,击败了74.34% 的Java用户
     */
    public int numTimesAllBlue(int[] flips) {
        int ans = 0;
        int n = flips.length, max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(flips[i], max);
            if (max == i + 1) {
                ans++;
            }
        }
        return ans;
    }

}
