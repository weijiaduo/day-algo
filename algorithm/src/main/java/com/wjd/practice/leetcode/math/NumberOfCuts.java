package com.wjd.practice.leetcode.math;

/**
 * 2481. 分割圆的最少切割次数
 * <p>
 * 圆内一个 有效切割 ，符合以下二者之一：
 * <p>
 * 该切割是两个端点在圆上的线段，且该线段经过圆心。
 * 该切割是一端在圆心另一端在圆上的线段。
 * <p>
 * 一些有效和无效的切割如下图所示。
 * <p>
 * 给你一个整数 n ，请你返回将圆切割成相等的 n 等分的 最少 切割次数。
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 4
 * 输出：2
 * 解释：
 * 上图展示了切割圆 2 次，得到四等分。
 * <p>
 * 示例 2：
 * <p>
 * <p>
 * 输入：n = 3
 * 输出：3
 * 解释：
 * 最少需要切割 3 次，将圆切成三等分。
 * 少于 3 次切割无法将圆切成大小相等面积相同的 3 等分。
 * 同时可以观察到，第一次切割无法将圆切割开。
 * <p>
 * 提示：
 * <p>
 * 1 <= n <= 100
 *
 * @author weijiaduo
 * @since 2023/6/17
 */
public class NumberOfCuts {

    /**
     * 思路：一直除2，能尽量一次性切成2半，就尽量切
     * <p>
     * 复杂度：时间 O(logn) 空间 O(1)
     * <p>
     * 执行耗时:0 ms,击败了100.00% 的Java用户
     * 内存消耗:38 MB,击败了91.43% 的Java用户
     */
    public int numberOfCuts(int n) {
        if (n <= 1) {
            return 0;
        }
        int cnt = 0, r = n;
        while (r > 1 && r % 2 == 0) {
            cnt += r / 2;
            r %= 2;
        }
        return cnt + r;
    }

    /**
     * 官方题解
     * <p>
     * 思路：n 为偶数，则需要 n/2 条直径；n 为奇数，则需要 n 条半径
     * <p>
     * 复杂度：O(1) 空间 O(1)
     * <p>
     * 执行耗时:0 ms,击败了100.00% 的Java用户
     * 内存消耗:38.2 MB,击败了65.14% 的Java用户
     */
    private int numberOfCuts2(int n) {
        if (n == 1) {
            return 0;
        }
        if (n % 2 == 0) {
            return n / 2;
        }
        return n;
    }

}
