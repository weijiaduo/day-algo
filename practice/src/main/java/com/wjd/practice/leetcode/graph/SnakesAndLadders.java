package com.wjd.practice.leetcode.graph;

import com.wjd.practice.TestCase;

import java.util.ArrayDeque;
import java.util.Queue;

/**
 * 909. 蛇梯棋
 * <p>
 * 给你一个大小为 n x n 的整数矩阵 board ，方格按从 1 到 n² 编号，
 * <p>
 * 编号遵循 转行交替方式 ，从左下角开始 （即，从 board[n - 1][0] 开始）每一行交替方向。
 * <p>
 * 玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。
 * <p>
 * 每一回合，玩家需要从当前方格 curr 开始出发，按下述要求前进：
 * <p>
 * 选定目标方格 next ，目标方格的编号符合范围 [curr + 1, min(curr + 6, n²)] 。
 * <p>
 * 该选择模拟了掷 六面体骰子 的情景，无论棋盘大小如何，玩家最多只能有 6 个目的地。
 * <p>
 * 传送玩家：如果目标方格 next 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 next 。
 * <p>
 * 当玩家到达编号 n² 的方格时，游戏结束。
 * <p>
 * r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；
 * <p>
 * 如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。编号为 1 和 n² 的方格上没有蛇或梯子。
 * <p>
 * 注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，玩家也 不能 继续移动。
 * <p>
 * 举个例子，假设棋盘是 [[-1,4],[-1,3]] ，第一次移动，玩家的目标方格是 2 。那么这个玩家将会顺着梯子到达方格 3 ，但 不能 顺着方格 3
 * 上的梯子前往方格 4 。
 * <p>
 * 返回达到编号为 n² 的方格所需的最少移动次数，如果不可能，则返回 -1。
 * <p>
 * 示例 1：
 * <p>
 * 输入：board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35
 * ,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
 * 输出：4
 * 解释：
 * 首先，从方格 1 [第 5 行，第 0 列] 开始。
 * 先决定移动到方格 2 ，并必须爬过梯子移动到到方格 15 。
 * 然后决定移动到方格 17 [第 3 行，第 4 列]，必须爬过蛇到方格 13 。
 * 接着决定移动到方格 14 ，且必须通过梯子移动到方格 35 。
 * 最后决定移动到方格 36 , 游戏结束。
 * 可以证明需要至少 4 次移动才能到达最后一个方格，所以答案是 4 。
 * <p>
 * 示例 2：
 * <p>
 * 输入：board = [[-1,-1],[-1,3]]
 * 输出：1
 * <p>
 * 提示：
 * <p>
 * n == board.length == board[i].length
 * 2 <= n <= 20
 * grid[i][j] 的值是 -1 或在范围 [1, n²] 内
 * 编号为 1 和 n² 的方格上没有蛇或梯子
 *
 * @author weijiaduo
 * @since 2023/11/30
 */
public class SnakesAndLadders {

    /**
     * 思路：广度优先搜索
     * <p>
     * 复杂度：时间 O(n^2) 空间 O(n^2)
     * <p>
     * 执行耗时:4 ms,击败了69.69% 的Java用户
     * 内存消耗:42.2 MB,击败了78.22% 的Java用户
     */
    @TestCase(input = {
            "[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
            "[[-1,-1],[-1,3]]",
            "[[-1,-1,19,10,-1],[2,-1,-1,6,-1],[-1,17,-1,19,-1],[25,-1,20,-1,-1],[-1,-1,-1,-1,15]]",
            "[[-1,-1,-1,46,47,-1,-1,-1],[51,-1,-1,63,-1,31,21,-1],[-1,-1,26,-1,-1,38,-1,-1],[-1,-1,11,-1,14,23,56,57],[11,-1,-1,-1,49,36,-1,48],[-1,-1,-1,33,56,-1,57,21],[-1,-1,-1,-1,-1,-1,2,-1],[-1,-1,-1,8,3,-1,6,56]]"},
            output = {"4", "1", "2", "4"})
    public int bfs(int[][] board) {
        int n = board.length;
        Queue<Integer> queue = new ArrayDeque<>();
        queue.offer(1);
        boolean[] visited = new boolean[n * n + 1];
        visited[1] = true;
        int steps = -1;
        while (!queue.isEmpty()) {
            steps++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == n * n) {
                    return steps;
                }

                // 遍历当前位置的下一步
                int low = cur + 1, high = Math.min(cur + 6, n * n);
                for (int j = low; j <= high; j++) {
                    // 计算位置坐标
                    int r = (j - 1) / n, c = (j - 1) % n;
                    if (r % 2 != 0) {
                        // 奇数行，列号是从右到左
                        c = n - 1 - c;
                    }
                    // 行号是从下往上的
                    r = n - 1 - r;

                    int next = board[r][c] == -1 ? j : board[r][c];
                    if (!visited[next]) {
                        visited[next] = true;
                        queue.offer(next);
                    }
                }
            }
        }
        return -1;
    }

}
